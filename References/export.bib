@generic{Baabad2020,
   abstract = {Software architecture (SA) has a prominent role in all stages of system development. Given the persistent evolution of software systems over time, SA tends to be eroded or degraded. Such phenomenon is called architectural degradation. In light of this phenomenon, the current study focuses on problems of architectural erosion in the open-source software (OSS). There has been a significant research activity on the OSS over the last decade. Nonetheless, the architectural degradation problems in the OSS are still scattered and disorganized. In addition, there has been no systematic attempt made on existing studies to provide evidence, insight and better understanding for researchers and practitioners. The main objective of the present study is to provide a profound understanding and to review the existing studies on the architectural erosion of the OSS. In this study, we conduct a systematic literature review (SLR) to gather, organize, classify, and analyze the architectural degradation of previous papers published until the year 2020. The data for this study were collected from eight major online databases (ACM, Springer, ScienceDirect, Taylor, IEEE Explorer, Scopus, Web of Science, and Wiley). A total of 74 primary studies were identified as the final samples of this research. The results indicated that rapid software evolution, frequent changes, and the lack of developers’ awareness are the most common causes occurred in architecture degradation. Meanwhile, the prominent key indicators of architectural erosion symptoms are code smells and architectural smells. Additionally, the results indicated the most commonly used of the proposed solution for addressing architectural erosion is the metrics-based strategy. Acknowledging the limitations of the current study, more studies are needed that focus on determining other causes that are still ambiguous and improving the other solutions to provide better results in the precision and effectiveness of addressing architectural erosion.},
   author = {Ahmed Baabad and Hazura Binti Zulzalil and Sa'Adah Hassan and Salmi Binti Baharom},
   doi = {10.1109/ACCESS.2020.3024671},
   issn = {21693536},
   journal = {IEEE Access},
   keywords = {Architectural degradation,Architectural erosion,OSS,Open-source,Software architecture,Systematic literature review},
   pages = {173681-173709},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Software architecture degradation in open source software: A systematic literature review},
   volume = {8},
   year = {2020},
}
@report{Grzegorzewska2021,
   author = {Paula Grzegorzewska and Andrew Katz and Sachiko Muto and Sivan Pätsch and Torben Schubert},
   title = {The impact of Open Source Software and Hardware on technological independence, competitiveness and innovation in the EU economy},
   year = {2021},
}
@article{,
   abstract = {Reconfigurable computing provides a paradigm to create intelligent systems different from the classic software computing approach. Instead of using a processor with an instruction set, a full stack of middleware, and an application program running on top, the field-programmable gate arrays (FPGAs) integrate a cell set that can be configured in different ways. A few vendors have dominated this market with their proprietary tools, hardware devices, and boards, resulting in fragmented ecosystems with few standards and little interoperation. However, a new and complete toolchain for FPGAs with its associated open tools has recently emerged from the open-source community. Robotics is an expanding application field that may definitely benefit from this revolution, as fast speed and low power consumption are usual requirements. This paper hypothesizes that basic reactive robot behaviors may be easily designed following the reconfigurable computing approach and the state-of-the-art open FPGA toolchain. They provide new abstractions such as circuit blocks and wires for building intelligent robots. Visual programming and block libraries make such development painless and reliable. As experimental validation, two reactive behaviors have been created in a real robot involving common sensors, actuators, and in-between logic. They have been also implemented using classic software programming for comparison purposes. Results are discussed and show that the development of reactive robot behaviors using reconfigurable computing and open tools is feasible, also achieving a high degree of simplicity and reusability, and benefiting from FPGAs’ low power consumption and time-critical responsiveness.},
   author = {José M. Cañas and Jesús Fernández-Conde and Julio Vega and Juan Ordóñez},
   doi = {10.3390/electronics11010008},
   issn = {20799292},
   issue = {1},
   journal = {Electronics (Switzerland)},
   keywords = {Open-source FPGAs,Reconfigurable computing,Robotics},
   month = {1},
   publisher = {MDPI},
   title = {Reconfigurable computing for reactive robotics using open-source fpgas},
   volume = {11},
   year = {2022},
}
@inproceedings{Gautier2017,
   abstract = {High-Ievel synthesis tools allow programmers to use OpenCL to create FPGA designs. Unfortunately, these tools have a complex compilation process that can take several hours to synthesize a single design. This creates a significant barrier for design optimization since even experts typically need to test many designs due to the non-obvious interactions between the different optimizations. Thus, understanding the design space, and guiding the optimization process is a crucial requirement for enabling the widespread adoption of these high-level synthesis tools. However this requires a significant amount of design space data that is currently unavailable or difficult to generate. To solve this problem, we present an OpenCL FPGA benchmark suite. We outfitted each benchmark with a range of optimization parameters (or knobs), compiled over 8300 unique designs using the Altera OpenCL SDK, executed them on a Terasic DES board, and recorded their corresponding performance and utilization characteristics. We describe the resulting design spaces, and perform a statistical analysis of the optimization configurations which provides valuable architecture insights to FPGA developers. We make the benchmarks and results completely open-source to give opportunities for the community to perform additional analyses and provide a repository of well-documented designs for follow-on research.},
   author = {Quentin Gautier and Alrie Althoff and Pingfan Meng and Ryan Kastner},
   doi = {10.1109/FPT.2016.7929519},
   isbn = {9781509056026},
   journal = {Proceedings of the 2016 International Conference on Field-Programmable Technology, FPT 2016},
   month = {5},
   pages = {141-148},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Spector: An OpenCL FPGA benchmark suite},
   year = {2017},
}
@inproceedings{Jia2014,
   abstract = {FPGA-based SoCs have been gaining great favors among traditional applications and expanding the application domains to some new areas. Reusing and sharing components is an attractive and pratical methodology for system designers to reduce the design complexity of the SoC architectures. Open source hardware has become an effective method of improving the design productivity. As the core functional component, processors affects the performance of SoC systems. This paper investigates existing open source processors, and gives an overview. From the points of usability and stability, the main features of open source processors are summarized. Following these features, some open source processors with high usability and stability are selected. These open source processors and existing vendor-provided soft processors are implemented on Stratix V and Virtex-7 FPGAs using corresponding EDA tools, Quart us n and ISE. The implementation results are compared and discussed.},
   author = {Rui Jia and Colin Yu Lin and Zhenhong Guo and Rui Chen and Fei Wang and Tongqiang Gao and Haigang Yang},
   doi = {10.1109/FPL.2014.6927482},
   isbn = {9783000446450},
   journal = {Conference Digest - 24th International Conference on Field Programmable Logic and Applications, FPL 2014},
   month = {10},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {A survey of open source processors for FPGAs},
   year = {2014},
}
@inproceedings{Romanov2017,
   abstract = {The paper proposes a new approach for FPGA reconfiguration based on usage of the open-source synthesis and place-and-route tools. The well-known partial reconfiguration technologies assume pre-compilation of all required FPGA configurations by the designer. In autonomous intelligent control systems it can become quite a strong limitation, due to control law couldn't be changed on-board without using external FPGA development tool. The paper proposes automatic Verilog code generation and synthesis directly on embedded controller, followed by full FPGA reconfiguration. The experimental results shows, that the resource usage of the FPGA configurations built by open-source tools are comparable to the ones built by well-known commercial toolchain)},
   author = {Alexey Romanov and Mikhail Romanov and Alexander Kharchenko},
   doi = {10.1109/EIConRus.2017.7910719},
   isbn = {9781509048656},
   journal = {Proceedings of the 2017 IEEE Russia Section Young Researchers in Electrical and Electronic Engineering Conference, ElConRus 2017},
   keywords = {Arachne-pnr,Control systems,FPGA,IceStorm,Reconfiguration,Verilog,Yosys},
   month = {4},
   pages = {976-981},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {FPGA-based control system reconfiguration using open source software},
   year = {2017},
}
@article{Robbins2018,
   author = {Carol Robbins and Gizem Korkmaz and José Calderón and Daniel Chen and Claire Kelling and Stephanie Shipp and Sallie Keller},
   title = {Open Source Software as Intangible Capital Measuring the Cost and Impact of Free Digital Tools Preliminary Draft},
   year = {2018},
}
@article{Oellermann2022,
   abstract = {Openly shared low-cost electronic hardware applications, known as open electronics, have sparked a new open-source movement, with much untapped potential to advance scientific research. Initially designed to appeal to electronic hobbyists, open electronics have formed a global “maker” community and are increasingly used in science and industry. In this perspective article, we review the current costs and benefits of open electronics for use in scientific research ranging from the experimental to the theoretical sciences. We discuss how user-made electronic applications can help (I) individual researchers, by increasing the customization, efficiency, and scalability of experiments, while improving data quantity and quality; (II) scientific institutions, by improving access to customizable high-end technologies, sustainability, visibility, and interdisciplinary collaboration potential; and (III) the scientific community, by improving transparency and reproducibility, helping decouple research capacity from funding, increasing innovation, and improving collaboration potential among researchers and the public. We further discuss how current barriers like poor awareness, knowledge access, and time investments can be resolved by increased documentation and collaboration, and provide guidelines for academics to enter this emerging field. We highlight that open electronics are a promising and powerful tool to help scientific research to become more innovative and reproducible and offer a key practical solution to improve democratic access to science.},
   author = {Michael Oellermann and Jolle W Jolles and Diego Ortiz and Rui Seabra and Tobias Wenzel and Hannah Wilson and Richelle L Tanner},
   doi = {10.1093/icb/icac043},
   issn = {1540-7063},
   issue = {4},
   journal = {Integrative and Comparative Biology},
   month = {10},
   pages = {1061-1075},
   publisher = {Oxford University Press (OUP)},
   title = {Open Hardware in Science: The Benefits of Open Electronics},
   volume = {62},
   year = {2022},
}
@report{Liu2014,
   author = {Hao Jun Liu},
   title = {Archipelago-An Open Source FPGA with Toolflow Support},
   url = {http://www.eecs.berkeley.edu/Pubs/TechRpts/2014/EECS-2014-43.html},
   year = {2014},
}
@report{Njuguna2008,
   abstract = {New markets are emerging for the fast growing field-programmable gate array (FPGA) industry. Standard and fair benchmarking practices are necessary to evaluate FPGA systems and determine their potential to support target applications. This paper provides an extensive survey of FPGA benchmarks in both academia and industry.},
   author = {Raphael Njuguna},
   keywords = {BDTI,BLAST,Benchmark,DSP,Dhrystone,EEMBC,Evaluation,FPGA,IWLS,LINPACK,MATLAB,MCNC,MediaBench,MiBench,OpenCores,OpenFPGA,PREP,Performance,RAW,Smith-Waterman,Toronto 20,VPR},
   title = {A Survey of FPGA Benchmarks Benchmark 4. Benchmarks for Hybrid-FPGA Systems 4.1. Benchmarks for FPGA-based Digital Signal Processing Systems 4.1.1. BDTI Communications Benchmark 4.1.2. MATLAB Benchmarks 4.1.3. MediaBench Benchmark Set 4.2. Benchmarks for FPGA-based Biological Systems 4.2.1. OpenFPGA.org 4.2.2. Smith-Waterman Algorithm},
   year = {2008},
}
@article{Murray2020,
   abstract = {As the benefits of Moore's Law diminish, computing performance, and efficiency gains are increasingly achieved through specializing hardware to a domain of computation. However, this limits the hardware's generality and flexibility. Field-programmable gate arrays (FPGAs), microchips which can be reprogrammed to implement arbitrary digital circuits, enable the benefits of specialization while remaining flexible. A challenge to using FPGAs is the complex computer-aided design flow required to efficiently map a computation onto an FPGA. Traditionally, these design flows are closed-source and highly specialized to a particular vendor's devices. We propose an alternate data-driven approach, which uses highly adaptable and retargettable open-source tools to target both commercial and research FPGA architectures. While challenges remain, we believe this approach makes the development of novel and commercial FPGA architectures faster and more accessible. Furthermore, it provides a path forward for industry, academia, and the open-source community to collaborate and combine their resources to advance FPGA technology.},
   author = {Kevin E. Murray and Mohamed A. Elgammal and Vaughn Betz and Tim Ansell and Keith Rothman and Alessandro Comodi},
   doi = {10.1109/MM.2020.2998435},
   issn = {19374143},
   issue = {4},
   journal = {IEEE Micro},
   month = {7},
   pages = {49-57},
   publisher = {IEEE Computer Society},
   title = {SymbiFlow and VPR: An Open-Source Design Flow for Commercial and Novel FPGAs},
   volume = {40},
   year = {2020},
}
@book{,
   abstract = {"IEEE Catalog Number CFP1939T-PRT"--PDF copyright page},
   author = {Roland Höller and Dominik Ballek and Peter Rössler and Markus Krapfenbauer and Martin Linauer},
   isbn = {9781728117409},
   title = {Open-Source RISC-V Processor IP Cores for FPGAs – Overview and Evaluation},
   year = {2018},
}
@book{Heinz2019,
   abstract = {"IEEE Catalog Number CFP 19389-ART."},
   author = {Carsten Heinz and Yannick Lavan and Jaco Hofmann and Andreas Koch},
   isbn = {9781728119571},
   title = {A Catalog and In-Hardware Evaluation of Open-Source Drop-In Compatible RISC-V Softcore Processors},
   year = {2019},
}
@article{Tang2020,
   abstract = {Demanded by ever-evolving data processing algorithms, field-programmable gate arrays (FPGAs) have become essential components of modern computing systems, thanks to their reconfigurable and distributed computing capabilities. However, FPGAs are among the very few integrated chips that still require long development cycles and high human efforts, even for industrial vendors. In this article, we introduce OpenFPGA, an open-source framework that can automate and significantly accelerate the development cycle of customizable FPGA architectures. OpenFPGA allows users to customize their FPGA architectures down to circuit-level details using a high-level architecture description language and autogenerate associated Verilog netlists which can be used in a backend flow to generate production-ready layouts. A generic Verilog-to-Bitstream generator is also provided, allowing end-users to implement practical applications on any FPGAs that OpenFPGA can support. Using OpenFPGA, we demonstrate less than 24-h layout generation of two FPGA fabrics, which are based on a Stratix-like architecture built with a commercial 12-nm standard cell library and 40-nm custom cells, respectively.},
   author = {Xifan Tang and Edouard Giacomin and Baudouin Chauviere and Aurelien Alacchi and Pierre Emmanuel Gaillardon},
   doi = {10.1109/MM.2020.2995854},
   issn = {19374143},
   issue = {4},
   journal = {IEEE Micro},
   month = {7},
   pages = {41-48},
   publisher = {IEEE Computer Society},
   title = {OpenFPGA: An Open-Source Framework for Agile Prototyping Customizable FPGAs},
   volume = {40},
   year = {2020},
}
@inproceedings{Meyer2020,
   abstract = {FPGAs have found increasing adoption in data center applications since a new generation of high-level tools have become available which noticeably reduce development time for FPGA accelerators and still provide high-quality results. There is, however, no high-level benchmark suite available, which specifically enables a comparison of FPGA architectures, programming tools, and libraries for HPC applications. To fill this gap, we have developed an OpenCL-based open-source implementation of the HPCC benchmark suite for Xilinx and Intel FPGAs. This benchmark can serve to analyze the current capabilities of FPGA devices, cards, and development tool flows, track progress over time, and point out specific difficulties for FPGA acceleration in the HPC domain. Additionally, the benchmark documents proven performance optimization patterns. We will continue optimizing and porting the benchmark for new generations of FPGAs and design tools and encourage active participation to create a valuable tool for the community. To fill this gap, we have developed an OpenCL-based open-source implementation of the HPCC benchmark suite for Xilinx and Intel FPGAs. This benchmark can serve to analyze the current capabilities of FPGA devices, cards, and development tool flows, track progress over time, and point out specific difficulties for FPGA acceleration in the HPC domain. Additionally, the benchmark documents proven performance optimization patterns. We will continue optimizing and porting the benchmark for new generations of FPGAs and design tools and encourage active participation to create a valuable tool for the community.},
   author = {Marius Meyer and Tobias Kenter and Christian Plessl},
   doi = {10.1109/H2RC51942.2020.00007},
   isbn = {9781665415927},
   journal = {Proceedings of H2RC 2020: 6th International Workshop on Heterogeneous High-Performance Reconfigurable Computing, Held in conjunction with SC 2020: The International Conference for High Performance Computing, Networking, Storage and Analysis},
   keywords = {FPGA,HPC benchmarking,High Level Synthesis,OpenCL},
   month = {11},
   pages = {10-18},
   publisher = {Institute of Electrical and Electronics Engineers Inc.},
   title = {Evaluating FPGA Accelerator Performance with a Parameterized OpenCL Adaptation of Selected Benchmarks of the HPCChallenge Benchmark Suite},
   year = {2020},
}
@inproceedings{Li2021,
   abstract = {Field Programmable Gate Arrays (FPGA) are being used in a fast-growing range of scenarios, and heterogeneous CPU-FPGA systems are being tapped as a possible way to mitigate the challenges posed by the end of Moore's Law. This growth in diverse use cases has fueled the need to customize FPGA architectures for particular applications or application domains. While high-level FPGA models can help explore the FPGA architecture space, as FPGAs move to more advanced design nodes, there is an increased need for low-level FPGA research and prototyping platforms that can be brought all the way to fabrication. This paper presents Princeton Reconfigurable Gate Array (PRGA), a highly customizable, scalable, and complete open-source framework for building custom FPGAs. The framework's core functions include generating synthesizable Verilog from user-specified FPGA architectures, and providing a complete, auto-generated, open-source CAD toolchain for the custom FPGAs. Developed in Python, PRGA provides a user-friendly API and supports use both as a standalone FPGA as well as an embedded FPGA. PRGA is a great platform for FPGA architecture research, FPGA configuration memory research, FPGA CAD tool research, and heterogeneous systems research. It is also a completely open-source framework for designers who need a free and customizable FPGA IP core. An FPGA designed with PRGA is placed and routed using standard cell libraries. The design is evaluated and compared to prior works, providing comparable performance and increased configurability.},
   author = {Ang Li and David Wentzlaff},
   doi = {10.1145/3431920.3439294},
   isbn = {9781450382182},
   journal = {FPGA 2021 - 2021 ACM/SIGDA International Symposium on Field-Programmable Gate Arrays},
   keywords = {FPGA,FPGA architecture,Open-source hardware},
   month = {2},
   pages = {127-137},
   publisher = {Association for Computing Machinery, Inc},
   title = {PRGA: An open-source fpga research and prototyping framework},
   year = {2021},
}
